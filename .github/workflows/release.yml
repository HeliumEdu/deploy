name: "Release"

run-name: "Release ${{ github.event.inputs.version }}"

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
      environment:
        type: choice
        required: true
        options:
        - prod

jobs:
  release:
    name: Release

    env:
      FORCE_COLOR: 1
      PYTHONUNBUFFERED: 1
      PLATFORM: linux/amd64
      TERRAFORM_API_TOKEN: ${{ secrets.TERRAFORM_API_TOKEN }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      PLATFORM_EMAIL_HOST_USER: ${{ secrets.PLATFORM_EMAIL_HOST_USER }}
      PLATFORM_EMAIL_HOST_PASSWORD: ${{ secrets.PLATFORM_EMAIL_HOST_PASSWORD }}
      PLATFORM_TWILIO_ACCOUNT_SID: ${{ secrets.PLATFORM_TWILIO_ACCOUNT_SID }}
      PLATFORM_TWILIO_AUTH_TOKEN: ${{ secrets.PLATFORM_TWILIO_AUTH_TOKEN }}
      PLATFORM_TWILIO_SMS_FROM: ${{ vars.PLATFORM_TWILIO_SMS_FROM }}
      CI_AWS_S3_ACCESS_KEY_ID: ${{ secrets.CI_AWS_S3_ACCESS_KEY_ID }}
      CI_AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_S3_SECRET_ACCESS_KEY }}
      CI_TWILIO_RECIPIENT_PHONE_NUMBER: ${{ secrets.CI_TWILIO_RECIPIENT_PHONE_NUMBER }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_KEY_GITHUB }}
      - name: Set up Node 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Set up Python "3.12"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Setup git
        run: |
          git config --global user.name "GitHub Release Bot"
          git config --global user.email "<contact@alexlaird.com>"
      - name: Install GitHub SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_GITHUB }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_GITHUB }}
          if_key_exists: replace
      - name: Install dependencies
        run: make install
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build
        run: TAG_VERSION=${{ github.event.inputs.version }} make build
      - name: Run CI tests against build
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          retry_wait_seconds: 5
          max_attempts: 3
          command: TAG_VERSION=${{ github.event.inputs.version }} make test-ci
      - name: Cut release tags
        run: helium-cli build-release ${{ github.event.inputs.version }}
      - name: Publish artifacts
        run: TAG_VERSION=${{ github.event.inputs.version }} make publish
      - name: Deploy release
        run: VERSION=${{ github.event.inputs.version }} ENVIRONMENT=${{ github.event.inputs.environment }} python bin/trigger-release.py
      - name: Trigger CI tests against deploy
        run: |
          # Wait before triggering CI tests, to allow Terraform to apply and ECS to roll nodes
          curl -X POST https://api.github.com/repos/HeliumEdu/ci-tests/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.PERSONAL_ACCESS_TOKEN }} \
          --data '{"event_type": "Triggered from `deploy` Release ${{ github.event.inputs.version }}", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'
      - name: Dump Docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
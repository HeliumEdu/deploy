name: "Deploy Release"

run-name: "Deploy release ${{ inputs.version }}"

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
      environment:
        type: choice
        required: true
        options:
        - prod
      cut_release:
        type: boolean
        required: true
        default: false
        description: "Check to cut a tag (if deploying as part of a build pipeline), leave unchecked if directly deploying an existing build"
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      environment:
        type: string
        required: true
      cut_release:
        type: boolean
        required: true

concurrency:
  group: "helium-deploy-${{inputs.environment}}"

jobs:
  test:
    name: Test Release

    env:
      FORCE_COLOR: 1
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      FRONTEND_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/helium/frontend:${{ inputs.version }}
      PLATFORM_RESOURCE_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/helium/platform-resource:${{ inputs.version }}
      PLATFORM_API_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/helium/platform-api:${{ inputs.version }}
      PLATFORM_WORKER_IMAGE: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/helium/platform-worker:${{ inputs.version }}
      PLATFORM_EMAIL_HOST_USER: ${{ secrets.PLATFORM_EMAIL_HOST_USER }}
      PLATFORM_EMAIL_HOST_PASSWORD: ${{ secrets.PLATFORM_EMAIL_HOST_PASSWORD }}
      PLATFORM_TWILIO_ACCOUNT_SID: ${{ secrets.PLATFORM_TWILIO_ACCOUNT_SID }}
      PLATFORM_TWILIO_AUTH_TOKEN: ${{ secrets.PLATFORM_TWILIO_AUTH_TOKEN }}
      PLATFORM_TWILIO_SMS_FROM: ${{ vars.PLATFORM_TWILIO_SMS_FROM }}
      CI_AWS_S3_ACCESS_KEY_ID: ${{ secrets.CI_AWS_S3_ACCESS_KEY_ID }}
      CI_AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_S3_SECRET_ACCESS_KEY }}
      CI_TWILIO_RECIPIENT_PHONE_NUMBER: ${{ secrets.CI_TWILIO_RECIPIENT_PHONE_NUMBER }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python "3.12"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install GitHub SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_GITHUB }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_GITHUB }}
          if_key_exists: replace
      - name: Install dependencies
        run: make install
      - name: Run CI tests against release build
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 4
          retry_wait_seconds: 15
          max_attempts: 2
          command: |
            aws ecr get-login-password --region ${{ AWS_REGION }} | docker login --username AWS --password-stdin ${{ AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com \
            TAG_VERSION=${{ inputs.version }} make test-ci
      - name: Dump Docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2

  release:
    name: Deploy Release
    needs: test

    env:
      FORCE_COLOR: 1
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      GITHB_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      TERRAFORM_API_TOKEN: ${{ secrets.TERRAFORM_API_TOKEN }}
      ENVIRONMENT: ${{ inputs.environment }}
      VERSION: ${{ inputs.version }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_KEY_GITHUB }}
      - name: Set up Python "3.12"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Setup git
        run: |
          git config --global user.name "GitHub Release Bot"
          git config --global user.email "<contact@alexlaird.com>"
      - name: Install GitHub SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_GITHUB }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_GITHUB }}
          if_key_exists: replace
      - name: Install dependencies
        run: make install-reqs
      - name: Deploy release
        run: CUT_RELEASE=${{ inputs.cut_release }} python bin/trigger-release.py
      - name: Trigger CI tests against deploy
        run: |
          curl -X POST https://api.github.com/repos/HeliumEdu/ci-tests/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u $GITHB_ACCESS_TOKEN \
          --data '{"event_type": "Triggered from `deploy` Release $VERSION", "client_payload": { "repository": "'"$GITHUB_REPOSITORY"'" }}'